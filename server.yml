Description: 
    Philip Tao - Project 2
    This contain resources for load balancer, AutoScalingGroup, Bastion host and Web servers


Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    BastionImageId:
        Description: Bastion ImageId
        Type: String

    WebserverImageId:
        Description: Webserver ImageId
        Type: String
    BastionInstanceType:
        Description: Bastion instance type
        Type: String

    WebserverInstanceType:
        Description: Webserver instance type
        Type: String

    WebserverKeyPair:
        Description: Webserver key pair
        Type: String
    BastionKeyPair:
        Description: Bastion key pair
        Type: String




Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:

      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  BastionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh from public subnet into Bastion
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 103.1.212.76/32
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0



  S3ReadonlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: A role to allow EC2 to read from S3 bucket
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      RoleName: UdacityS3ReadOnlyEC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: WebserverProfile
      Roles: 
        - Ref: S3ReadonlyEC2

  BastionHost:
    Type: AWS::EC2::Instance
    Properties: 
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref BastionImageId
      KeyName: !Ref BastionKeyPair
      SecurityGroupIds: 
        - !Ref BastionSecGroup
      InstanceType: !Ref BastionInstanceType
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-PUB1-SN"
      BlockDeviceMappings:
        - DeviceName: "/dev/sdm"
          Ebs:
            VolumeSize: '10'
      Tags: 
        - Key: Name 
          Value: !Sub ${EnvironmentName} Bastion Host
        

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          apt install unzip -y
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "/home/ubuntu/awscliv2.zip"
          unzip /home/ubuntu/awscliv2.zip
          sudo ./aws/install

          systemctl start apache2.service

          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o -q udacity.zip
          
      ImageId: !Ref WebserverImageId
      KeyName: !Ref WebserverKeyPair
      SecurityGroups:
        - !Ref WebServerSecGroup
      InstanceType: !Ref WebserverInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '30'
      
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"      

  
Outputs: 

  WebAppLB: 
    Description: The URL of the LoadBalancer
    Value: !Sub http://${WebAppLB.DNSName}
    
  BastionHost: 
    Description: The DNS name of Bastion host
    Value: !Sub ${BastionHost.PublicDnsName}


    

   